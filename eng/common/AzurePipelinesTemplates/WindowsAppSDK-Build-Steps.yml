parameters:
  - name: BuildType
    displayName: "Build Type"
    type: string
    default: 'stable'
    values:
    - 'stable'
    - 'experimental'
  - name: "TransportPackages"
    displayName: "TransportPackages to replace (name:version)"
    type: object
    default:
      Foundation: 
        name: Microsoft.WindowsAppSDK.Foundation.TransportPackage
        version: 1.0.0-stable
      CsDev16: WindowsAppSDK.Cs.Extension.Dev16.Experimental.vsix
      CppDev17: WindowsAppSDK.Cpp.Extension.Dev17.Experimental.Standalone.vsix
      CsDev17: WindowsAppSDK.Cs.Extension.Dev17.Experimental.Standalone.vsix
steps:
  - task: AzureKeyVault@1
    inputs:
      azureSubscription: 'ProjectReunion Resource Manager'
      KeyVaultName: 'ProjectReunionCerts'
      SecretsFilter: 'TestMSCert'
      RunAsPreJob: false

  - checkout: git://ProjectReunion/ProjectReunionInternal@user/kythant/IntegrationTest

  - ${{ each package in parameters.TransportPackages }}:
    - task: Powershell@2
      name: UpdateVersionDetails
      inputs:
        filePath: '$(Build.SourcesDirectory)\eng\common\Scripts\UpdateVersionDetailsConfig.ps1'
        arguments: -dependencyName '${{ package.value.Name }}' -dependencyVersion '${{ package.value.Version }}'

  - task: PowerShell@2
    displayName: Debug
    inputs:
      targetType: 'inline'
      script: |
        $VersionDetailsPath = "$(Build.SourcesDirectory)\eng\Version.Details.xml"
        $VersionDetails = Get-Content -Encoding utf8 -Path $VersionDetailsPath
        Write-Host $VersionDetails

  - task: PowerShell@2
    name: CreateCert
    displayName: Create MyCert.pfx
    inputs:
      targetType: 'inline'
      script: |
        $kvSecretBytes = [System.Convert]::FromBase64String("$(TestMSCert)")
        $certCollection = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2Collection
        $certCollection.Import($kvSecretBytes,$null,[System.Security.Cryptography.X509Certificates.X509KeyStorageFlags]::Exportable)
        $certificateBytes = $certCollection.Export([System.Security.Cryptography.X509Certificates.X509ContentType]::Pkcs12)
        $pfxPath = (Join-Path $env:Build_SourcesDirectory 'MyCert.pfx')
        [System.IO.File]::WriteAllBytes($pfxPath, $certificateBytes)

  - task: NuGetAuthenticate@0
    inputs:
      nuGetServiceConnections: 'ProjectReunionInternal'

  - task: PowerShell@2
    name: BuildAll
    displayName: BuildAll
    inputs:
      filePath: 'BuildAll.ps1'
      arguments: -WindowsAppSDKPackageVersion "" -BuildType ${{ parameters.BuildType }} -Checkpoint "none"

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Windows App SDK Packages'
    inputs:
      PathtoPublish: '$(Build.SourcesDirectory)\PackLocation'
      artifactName: 'WindowsAppSDKNugetPackage'
